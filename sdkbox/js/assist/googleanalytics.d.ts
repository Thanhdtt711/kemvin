declare module sdkbox {     module PluginGoogleAnalytics {        /**        * Set GDPR        *        * **NOTE**: please call before 'init' function        */        export function setGDPR(enabled : boolean) : void;
        /*!        * initialize the plugin instance.        */        export function init(jsonconfig : object) : void;
        /*!        * The analytics session is being explicitly started at plugin initialization time.        */        export function startSession() : void;
        /*!        * You normally will never stop a session manually.        */        export function stopSession() : void;
        /*!        * Manually request dispatch of hits. By default, data is dispatched from the        * Google Analytics SDK for Android every 5 minutes.        */        export function dispatchHits() : void;
        /*!        * Change the dispatch info time period to the desired amount of seconds.        */        export function dispatchPeriodically(seconds : number) : void;
        /*!        * Stop periodically sending info. Then manually the <code>dispatchPeridically</code>        * or <code>dispatchHits</code> should be called.        */        export function stopPeriodicalDispatch() : void;
        /*!        * Set user ID for this tracking session        */        export function setUser(userID : string) : void;
        /*!        * Set value to custom dimension        */        export function setDimension(index : number , value : string) : void;
        /*!        * Set value to custom metric        */        export function setMetric(index : number , value : string) : void;
        /*!        * Log screen info. title is the title of a screen. Screens are logical units        * inside your app you'd like to identify at analytics panel.        */        export function logScreen(title : string) : void;
        /*!        * GoogleAnalytics::logEvent("Achievement", "Unlocked", "Slay 10 dragons", 5);        */        export function logEvent(eventCategory : string , eventAction : string , eventLabel : string , value : number) : void;
        /*!        * Log an exception. It is a basic support for in-app events.        */        export function logException(exceptionDescription : string , isFatal : boolean) : void;
        /*!        * Measure a time inside the application.        */        export function logTiming(timingCategory : string , timingInterval : number , timingName : string , timingLabel : string) : void;
        /*!        * Log a social event.        */        export function logSocial(socialNetwork : string , socialAction : string , socialTarget : string) : void;
        /*!        * Log ecommerce event        *        *                    // 1. track purchase                    std::map<std::string, std::string> info;                    // transaction info                    info["action"] = "purchase";                    info["transaction"] = "T12345";                    info["affiliation"] = "Google Store - Online";                    info["transactionCouponCode"] = "SUMMER2017";                    info["revenue"] = "37.39";                    info["tax"] = "2.85";                    info["shipping"] = "5.34";                    // product info                    info["productID"] = "P12345";                    info["productName"] = "Android Warhol T-Shirt";                    info["category"] = "Apparel/T-Shirts";                    info["brand"] = "SDKBox";                    info["productVariant"] = "black";                    info["productCouponCode"] = "APPARELSALE";                    info["price"] = "29.20";                    info["quantity"] = "1"; // int                    // currency code                    // https://support.google.com/analytics/answer/6205902?#supported-currencies                    info["currencyCode"] = "EUR";                    sdkbox::PluginGoogleAnalytics::logECommerce(info);                            // 2. track refund                    // transaction info                    info["action"] = "refund";                    info["transaction"] = "T12345";                    // product info                    info["productID"] = "P12345";                    info["quantity"] = "1";                    sdkbox::PluginGoogleAnalytics::logECommerce(info);        *        *        */        export function logECommerce(info : Map<string, string>) : void;
        /*!        * While running on dry run, the tracked events won't be sent to the actual        * analytics account.        */        export function setDryRun(enable : boolean) : void;
        /*!        * Enable advertising tracking when in google's ad vendors.        */        export function enableAdvertisingTracking(enable : boolean) : void;
        /*!        * Create a tracker identified by the google analytics tracker id XX-YYYYYYYY-Z.        * If the tracker already existed, no new tracker will be created. In any case, the        * tracker associated with tracker id will be set as default tracker for  analytics        * operations.        */        export function createTracker(trackerId : string) : void;
        /*!        * Enable a tracker identified by a trackerId. If the tracker does not exist,        * nothing will happen.        */        export function enableTracker(trackerId : string) : void;
        /*!        * Enables or disables uncaught exception reporting for a given tracker.        */        export function enableExceptionReporting(enable : boolean) : void;
    }}